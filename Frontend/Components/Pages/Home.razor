@using ApexCharts;
@using Blazor_ApexCharts;
@using Models;

@inject APIService APIService
@page "/"

<PageTitle>Home</PageTitle>

<h3>Sensor data for rum 1</h3>

@if (readings == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Temperature</th>
                <th>Humidity</th>
                <th>CO2-Level</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@lastReading.Temp C</td>
                <td>@lastReading.Humidity %</td>
                <td>@lastReading.CO2Level</td>
            </tr>
        </tbody>
    </table>
    <DemoContainer>
        <ApexChart TItem="Reading" Title="Orders Value"
                   XAxisType="XAxisType.Datetime"
                   Options="options">

            <ApexPointSeries TItem="Reading"
                             Items="readings"
                             Name="Net Value"
                             SeriesType="SeriesType.Line"
                             XValue="@(e => e.UnixTime.)"
                             YAggregate="@(e => e.Sum(e => e.NetValue))"
                             OrderBy="e=>e.X" />

            <ApexPointSeries TItem="Reading"
                             Items="SampleData.GetOrders()"
                             Name="Gross Value"
                             SeriesType="SeriesType.Line"
                             XValue="@(e => e.OrderDate.FirstDayOfMonth())"
                             YAggregate="@(e => e.Sum(e => e.GrossValue))"
                             OrderBy="e=>e.X" />
        </ApexChart>
    </DemoContainer>
}

@code {
    private List<Reading>? readings;
    private Reading? lastReading;
    private ApexChartOptions<Reading> options = new ApexCharts.ApexChartOptions<Reading>();

    protected override async Task OnInitializedAsync()
    {
        readings = await APIService.GetSensorData(1);
        lastReading = readings[readings.Count - 1];
        lastReading.Humidity = lastReading.Humidity / 100;
        lastReading.Temp = lastReading.Temp / 100;

        options.Debug = true;
        options.ForecastDataPoints = new ForecastDataPoints
            {
                Count = 3,
                DashArray = 4,
                FillOpacity = 0.5,
            };
        options.Tooltip = new ApexCharts.Tooltip { X = new TooltipX { Format = @"MMMM \ yyyy" } };
        options.Subtitle = new Subtitle { OffsetY = 15, Text = "DateTime sample with options" };
        options.Tooltip = new ApexCharts.Tooltip
            {
                Y = new TooltipY
                {
                    Title = new TooltipYTitle { Formatter = @"function(name) { return name + ':' }" },
                    Formatter = @"function(value, { series, seriesIndex, dataPointIndex, w }) { return '$' + value }"
                },
            };
        options.Xaxis = new XAxis
            {
                Title = new AxisTitle
                {
                    OffsetY = 5,
                    Text = "Month",
                    Style = new AxisTitleStyle { FontSize = "14px", Color = "lightgrey" }
                },
                AxisBorder = new AxisBorder
                {
                    Height = 2
                }
            };
        options.Yaxis = new List<YAxis>();
        options.Yaxis.Add(new YAxis
            {
                DecimalsInFloat = 0,
                Labels = new YAxisLabels { Rotate = -45, Style = new AxisLabelStyle { FontSize = "10px" } },
                Title = new AxisTitle { Text = "Value", Style = new AxisTitleStyle { FontSize = "14px", Color = "lightgrey" } }
            });

        options.Annotations = new Annotations { Yaxis = new List<AnnotationsYAxis>() };
        options.Annotations.Yaxis.Add(new AnnotationsYAxis
            {
                Y = 50000,
                BorderWidth = 2,
                StrokeDashArray = 5,
                BorderColor = "red",
                Label = new Label { Text = "Monthly Target" }
            });
    }
}